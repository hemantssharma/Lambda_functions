import boto3
from datetime import datetime, timedelta, timezone
import os
import json
 
def send_sns_notification(subject, message):
    sns = boto3.client('sns', region_name=os.environ['Region_Name'])  # Replace 'your_sns_region' with your desired SNS region
    topic_arn =os.environ['SNS_TOPIC_ARN']  # Replace 'your_sns_topic_arn' with your SNS topic ARN
 
    sns.publish(TopicArn=topic_arn, Message=message, Subject=subject)
 
def lambda_handler(event, context):
    try:
        region = os.environ['Region_Name']
        # Create an EC2 client
        ec2_client = boto3.client('ec2', region_name=region)
        # Create an Lambda client
        lambda_client = boto3.client('lambda', region_name=region)
        # Create an CloudTrail client
        cloudtrail_client = boto3.client('cloudtrail', region_name=region)
        #Get all volumes
        volumes = ec2_client.describe_volumes()
        # Set the threshold for unattached volumes (in days)
        threshold_days = int(os.environ.get('THRESHOLD_DAYS', '30')) # Default to 30 if not set or invalid
        current_time = datetime.now(timezone.utc)
        # List to store unattached volume details
        unattached_volumes = []
        #for counting volumes that are to be deleted
        i=0
 
        second_lambda_arn =os.environ['INVOKE_LAMBDA_ARN']
        volume_details = []  # Initialize volume_details as an empty list
        for volume in volumes['Volumes']:
            # Check if the volume is unattached
            if not volume['Attachments'] and volume['State'] == 'available':
                volume_id = volume['VolumeId']
                # Get the list of CloudTrail events related to detaching volumes
                cloudtrail_response = cloudtrail_client.lookup_events(
                    LookupAttributes=[
                        {
                            'AttributeKey': 'ResourceName',
                            'AttributeValue': f'{volume_id}'
                        }
                    ]    
                    #MaxResults=100  # Adjust the maximum number of events to retrieve as needed
                )
                event_exists = len(cloudtrail_response['Events'])
                #print ("event count:",event_exists)
                if event_exists > 0:
                    for event in cloudtrail_response['Events']:
                        if event['EventName']=='DetachVolume':
                            event_time = cloudtrail_response['Events'][0]['EventTime']
                            #event_time = datetime.strptime(event_time_str, '%Y-%m-%dT%H:%M:%S.%fZ')
                            # Calculate the detachment age
                            #current_time1 = datetime.utcnow()
                            detachment_age = current_time - event_time
                            if detachment_age.days > threshold_days:
                                volume_creation_time = volume['CreateTime']
                                volume_details = {
                                    'VolumeId': volume['VolumeId'],
                                    'CreateTime': volume_creation_time.isoformat(),
                                    'AgeInDays': detachment_age.days,
                                    'vol_size': volume['Size'],
                                    'vol_type': volume['VolumeType']
                                }
                                unattached_volumes.append(volume_details)
                                # Delete the unattached volume
                                ec2_client.delete_volume(VolumeId=volume_id)
                                i=i+1
        if len(volume_details)==0:
            unattached_volumes.append(f"No Detach records available in CloudTrail")
        #print(unattached_volumes)                        
        payload = {
        'volume_id': unattached_volumes,
        'count': i
        }
        #print(payload)
        response = lambda_client.invoke(
            FunctionName=second_lambda_arn,
            InvocationType='RequestResponse',  # Synchronous invocation
            Payload=json.dumps(payload)
        )
 
        second_lambda_output = json.loads(response['Payload'].read().decode('utf-8'))
        print(second_lambda_output)
 
 
    except Exception as e:
        # Log the exception
        print(f"An error occurred: {e}")
        sns_message=f"An error occurred: {e}"
        send_sns_notification("Error while EBS Volume Cleanup", sns_message)
        #sns_client.publish(TopicArn=sns_topic_arn, Message=sns_message, Subject="Error while EBS Volume Cleanup")
        # Optionally, you can re-raise the exception to let Lambda handle it
        # raise e
